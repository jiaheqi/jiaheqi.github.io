<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025年2月每日工作清单</title>
    <url>/2025/02/11/2025%E5%B9%B42%E6%9C%88%E6%AF%8F%E6%97%A5%E5%B7%A5%E4%BD%9C%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<h2 id="2025-02-11-周二"><a href="#2025-02-11-周二" class="headerlink" title="2025.02.11 周二"></a>2025.02.11 周二</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 添加裁剪隔离，避免类被裁剪 @重友 ，添加后出新包 @贾赫琦</li>
<li><input checked="" disabled="" type="checkbox"> 微信小游戏登录回调消息提添加 detail @重友</li>
<li><input checked="" disabled="" type="checkbox"> getPlatform 方法 webGL 平台需要做到可以区分是微信还是抖音 @重友</li>
<li><input disabled="" type="checkbox"> 微信广告回调的补充处理 @重友</li>
<li><input disabled="" type="checkbox"> 郑老师，项目测试没问题后,release3_reconstruct分支合并 release3 @贾赫琦</li>
<li><input disabled="" type="checkbox"> 三方登录 Authentication 的 factory接口 review @光哥</li>
<li><input disabled="" type="checkbox"> 微信和抖音平台的广告 unit id 获取需要追加到 game&#x2F;info 中 @王悦</li>
<li><input disabled="" type="checkbox"> 微信排行榜需求测试 @贾赫琦</li>
<li><input checked="" disabled="" type="checkbox"> 引力光哥修改的部分代码的合并 @贾赫琦</li>
<li><input disabled="" type="checkbox"> 微信消息订阅报错：fail, 0 : requestSubscribeMessage:fail require user interaction (only in touchend event) @重友</li>
</ul>
<h2 id="2025-02-13-周四"><a href="#2025-02-13-周四" class="headerlink" title="2025.02.13 周四"></a>2025.02.13 周四</h2><ul>
<li><input disabled="" type="checkbox"> 抖音广告回调的补充处理 @重友 @王悦</li>
<li><input disabled="" type="checkbox"> 抖音的功能的测试 @贾赫琦</li>
<li><input disabled="" type="checkbox"> MonoBehaviour 调整，测试能够正常调用zeus server @光哥 @贾赫琦</li>
</ul>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作清单</tag>
      </tags>
  </entry>
  <entry>
    <title>Android apk反编译与篡改</title>
    <url>/2025/01/03/Android-apk%E5%8F%8D%E7%BC%96%E8%AF%91%E4%B8%8E%E7%AF%A1%E6%94%B9/</url>
    <content><![CDATA[<h2 id="jadx-gui反编译"><a href="#jadx-gui反编译" class="headerlink" title="jadx gui反编译"></a>jadx gui反编译</h2><h3 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h3><blockquote>
<p>参考文档：<a class="link"   href="https://blog.csdn.net/qq_38393270/article/details/132046040" >https://blog.csdn.net/qq_38393270/article/details/132046040<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>安装</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">brew install jadx</span><br></pre></td></tr></table></figure></div>

<p>启动</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">jadx-gui</span><br></pre></td></tr></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>直接把apk拖进去打开就ok了，然后可以根据关键词搜索。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-23-57.png"
                      alt="2025-01-03-18-23-57.png"
                ></p>
<h2 id="apktool反编译和编译"><a href="#apktool反编译和编译" class="headerlink" title="apktool反编译和编译"></a>apktool反编译和编译</h2><blockquote>
<p>参考文档<br><a class="link"   href="https://blog.csdn.net/greatsam/article/details/137049910" >https://blog.csdn.net/greatsam/article/details/137049910<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.cnblogs.com/andy0816/p/15174370.html" >https://www.cnblogs.com/andy0816/p/15174370.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://developer.android.com/tools/apksigner?hl=zh-cn#options-sign" >https://developer.android.com/tools/apksigner?hl=zh-cn#options-sign<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>所有的java文件都是以smali的形式反编译出来的，修改smali其中的代码即可<br>如果项目中使用了ts的代码，那么编译之后会存在js文件中</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apktool d app-china-debug.apk -o zeusdemo</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-25-42.png"
                      alt="2025-01-03-18-25-42.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-25-52.png"
                      alt="2025-01-03-18-25-52.png"
                ></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apktool b zeusdemo -o zeusdemonew.apk</span><br></pre></td></tr></table></figure></div>

<h2 id="apksigner签名"><a href="#apksigner签名" class="headerlink" title="apksigner签名"></a>apksigner签名</h2><blockquote>
<p>如果不签名，导出的 apk 无法安装; apksigner 是安装 Android SDK 默认包含的 tool</p>
</blockquote>
<ol>
<li>找到 SDK 目录位置，从而找到 apksigner 的位置<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-27-25.png"
                      alt="2025-01-03-18-27-25.png"
                ></li>
<li>对修改完代码的 apk 进行签名</li>
</ol>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./apksigner sign --ks /Users/topjoy/tools/apktool/jiaheqi.jks  --out /Users/topjoy/tools/apktool/signedzeusdemo.apk /Users/topjoy/tools/apktool/zeusdemonew.apk</span><br></pre></td></tr></table></figure></div>

<p>如果没有 jks 签名文件需要生成一个，生成的时候可以借助 Android Studio 生成（也可以通过 apksigner 的命令生成）<br>打开 Build-Generate Signed App Bundle or APK-选择 APK-Next-Create new，可以创建新的签名文件<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-28-43.png"
                      alt="2025-01-03-18-28-43.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-28-49.png"
                      alt="2025-01-03-18-28-49.png"
                ><br>3. 签名后的 APK 安装后可以正常运行</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android apk 签名</title>
    <url>/2025/01/02/Android-apk%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h2 id="查看apk签名"><a href="#查看apk签名" class="headerlink" title="查看apk签名"></a>查看apk签名</h2><blockquote>
<p>参考文档：<a class="link"   href="https://developers.google.com/android/guides/client-auth?hl=zh-cn" >https://developers.google.com/android/guides/client-auth?hl=zh-cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">keytool -printcert -jarfile /Users/topjoy/Desktop/zeusbuild.apk</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">jarsigner -verify -verbose -certs app-release.apk </span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-02-18-29-27.png"
                      alt="001"
                ></p>
<p>firebase后台：<a class="link"   href="https://console.firebase.google.com/u/1/project/dao-project-380602/settings/general/android:com.topjoy.sdk_demo?hl=zh-cn" >https://console.firebase.google.com/u/1/project/dao-project-380602/settings/general/android:com.topjoy.sdk_demo?hl=zh-cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-02-18-30-20.png"
                      alt="002"
                ></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li><p>同一个包名，使用不同的签名keystore，最终打出的包签名是不一致的</p>
</li>
<li><p>如果打出的包签名SHA-1 SHA-256在firebase后台未配置，那么谷歌相关能力则无法使用，比如谷歌登录会失败，返回错误码10<br>  解决2的问题，可以使用同一个包名，或者把打出的包签名添加到firabse后台</p>
</li>
<li><p>android studio配置签名keystore<br> 在gradle文件添加配置</p>
 <div class="code-container" data-rel="Gradle"><figure class="iseeu highlight gradle"><table><tr><td class="code"><pre><span class="line">    signingConfigs &#123;</span><br><span class="line">    config &#123;<span class="comment">//谷歌支付使用的jks</span></span><br><span class="line">        storeFile <span class="keyword">file</span>(<span class="string">&#x27;mujianchen.jsk&#x27;</span>)</span><br><span class="line">        keyAlias <span class="string">&#x27;mujianchen&#x27;</span></span><br><span class="line">        keyPassword <span class="string">&#x27;mu123456&#x27;</span></span><br><span class="line">        storePassword <span class="string">&#x27;mu123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ylconfig &#123;<span class="comment">//可以用来测试的签名</span></span><br><span class="line">        storeFile <span class="keyword">file</span>(<span class="string">&#x27;youle.jks&#x27;</span>)</span><br><span class="line">        keyAlias <span class="string">&#x27;youle&#x27;</span></span><br><span class="line">        keyPassword <span class="string">&#x27;yl123456&#x27;</span></span><br><span class="line">        storePassword <span class="string">&#x27;yl123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>unity配置签名：在player-settings中<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-02-18-30-40.png"
                      alt="003"
                ></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Pages+Hexo+Waline+Leancloud+Artitalk搭建个人博客</title>
    <url>/2025/01/04/Github-Pages-Hexo-Waline-Leancloud-Artitalk%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Android设备获取OAID调研和实现</title>
    <url>/2025/01/13/Android%E8%AE%BE%E5%A4%87%E8%8E%B7%E5%8F%96OAID%E8%B0%83%E7%A0%94%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="什么是OAID、AAID、VAID"><a href="#什么是OAID、AAID、VAID" class="headerlink" title="什么是OAID、AAID、VAID"></a>什么是OAID、AAID、VAID</h2><h3 id="OAID"><a href="#OAID" class="headerlink" title="OAID"></a>OAID</h3><p>OAID是”Android ID”（安卓ID）的一种替代方案，其全称为”Open Anonymous Identifier”（开放匿名标识符）。<br>因传统的移动终端设备标识如国际移动设备识别码（IMEI）等已被部分国家认定为用户隐私的一部分，并存在被篡改和冒用的风险，所以在Android 10及后续版本中非厂商系统应用将无法获取IMEI、MAC等设备信息。无法获取IMEI会在用户行为统计过程中对设备识别产生一定影响。<br>移动安全联盟针对该问题联合国内手机厂商推出补充设备标准体系方案，选择OAID字段作为IMEI等的替代字段。OAID字段是由中国信通院联合华为、小米、OPPO、VIVO等厂商共同推出的设备识别字段，具有一定的权威性，可满足用户行为统计的使用场景。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>设备唯一标识符（UDID）：设备唯一硬件标识，设备生产时根据特定的硬件 信息生成，可用于设备的生产环境及合法性校验。不对第三方应用提供获取接 口，无法通过 SDK 获取。<br> 匿名设备标识符（OAID）：可以连接所有应用数据的标识符，移动智能终端 系统首次启动后立即生成，可用于广告业务。可以通过 SDK 获取到接口状态（重 置、关闭）、ID 值。<br> 开发者匿名设备标识符（VAID）：用于开放给开发者的设备标识符，可在应用安装时产生，可用于同一开发者不同应用之间的推荐。可以通过 SDK 获取到 ID 值。<br>应用匿名设备标识符（AAID）：第三方应用获取的匿名设备标识，可在应用安装时产生，可用于用户统计等。可以通过 SDK 获取到 ID值。  </p>
<h2 id="如何获取"><a href="#如何获取" class="headerlink" title="如何获取"></a>如何获取</h2><h3 id="官方SDK接入"><a href="#官方SDK接入" class="headerlink" title="官方SDK接入"></a>官方SDK接入</h3><h4 id="SDK获取"><a href="#SDK获取" class="headerlink" title="SDK获取"></a>SDK获取</h4><p>移动安全联盟官网：<a class="link"   href="http://www.msa-alliance.cn/" >http://www.msa-alliance.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>注意：但是注册需要企业账号，个人开发者无法注册使用，所以测试的时候在网上找了其他人提供的已经下载好的官方SDK。<br>百度云盘地址：<a class="link"   href="https://pan.baidu.com/s/1sVzBD_3mTXD_oqyu5I2VtQ" >https://pan.baidu.com/s/1sVzBD_3mTXD_oqyu5I2VtQ<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  提取码：we54<br>官方文档：<br>见附件。</p>
<h4 id="配置和调用"><a href="#配置和调用" class="headerlink" title="配置和调用"></a>配置和调用</h4><ol>
<li><p>把 oaid_sdk_x.x.x.aar 拷贝到项的 libs 目录，并设置依赖，其中 x.x.x 代表版本号</p>
</li>
<li><p>将 supplierconfig.json 拷贝到项目 assets 目录下<br>appid 需要移动互联网应用开发者根据应用使用需求到不同终端厂商的应用 商城申请，具体需咨询相关厂商，不需要填写其他第三方应用商店的 appid。 appid 只与 VAID 的获取有关，用于判断是否为同一开发者，如不需获取 vaid 可 不填写。目前只需设置 vivo 的 appid。（我们本次只需要获取OAID，所以不需要上架，也不需要appid）<br>配置文件中部分设备如果不配置厂商会无法获取，部分设备如小米即使配置文件中没有，也不影响获取，所以我们对接的时候，为了保险起见，配置文件中尽可能全一些。【 官方文档中说配置文件不用修改，只需填写对应 appid，并放到 assets 目录下即可  】</p>
</li>
<li><p>设置依赖</p>
</li>
<li><p>设置gradle编译选项，开发者可以根据自己对平台的选择进行合理配置（测试的时候不配置也没什么问题）<br> ndk { abiFilters ‘armeabi-v7a’,’x86’,’arm64-v8a’,’x86_64’,’armeabi’ }</p>
</li>
</ol>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">IIdentifierListener</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView tvContent;</span><br><span class="line">    String oaid;</span><br><span class="line">    String vaid;</span><br><span class="line">    String aaid;</span><br><span class="line">    <span class="meta">@SuppressLint(&quot;MissingInflatedId&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        tvContent = findViewById(R.id.tv);</span><br><span class="line">        MdidSdkHelper.InitSdk(getApplicationContext(), <span class="literal">true</span>, <span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//结果是异步返回的,使用时为空的话可以先休眠几秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OAID: &quot;</span>+oaid);</span><br><span class="line">        System.out.println(<span class="string">&quot;VAID: &quot;</span>+vaid);</span><br><span class="line">        System.out.println(<span class="string">&quot;AAID: &quot;</span>+aaid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnSupport</span><span class="params">(<span class="type">boolean</span> b, IdSupplier idSupplier)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(idSupplier==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        oaid=idSupplier.getOAID();</span><br><span class="line">        vaid=idSupplier.getVAID();</span><br><span class="line">        aaid=idSupplier.getAAID();</span><br><span class="line"></span><br><span class="line">        StringBuilder builder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;support: &quot;</span>).append(idSupplier.isSupported()?<span class="string">&quot;true&quot;</span>:<span class="string">&quot;false&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        builder.append(<span class="string">&quot;OAID: &quot;</span>).append(oaid).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        builder.append(<span class="string">&quot;VAID: &quot;</span>).append(vaid).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        builder.append(<span class="string">&quot;AAID: &quot;</span>).append(aaid).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String idstext=builder.toString();</span><br><span class="line">        Log.d(<span class="string">&quot;SdkDemo: &quot;</span>, idstext);</span><br><span class="line">        onIdsAvalid(idstext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onIdsAvalid</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> String ids)</span> &#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                tvContent.setText(ids);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i-blog.csdnimg.cn/blog_migrate/06645bb792f3ec187fe7c025961d3536.png"
                      alt="官方sdk获取结果"
                ></p>
<h3 id="三方实现接入"><a href="#三方实现接入" class="headerlink" title="三方实现接入"></a>三方实现接入</h3><h4 id="接入指引"><a href="#接入指引" class="headerlink" title="接入指引"></a>接入指引</h4><p>github地址：<a class="link"   href="https://github.com/gzu-liyujiang/Android_CN_OAID" >https://github.com/gzu-liyujiang/Android_CN_OAID<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>文档已经写的特别详细了，但是还是有一些地方需要注意一下：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">implementation(<span class="string">&#x27;com.github.gzu-liyujiang:Android_CN_OAID:最新版本号&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 如果使用了移动安全联盟SDK，共存的话需排除掉本项目依赖的华为/荣耀官方广告标识服务SDK，因为移动安全联盟SDK也依赖了华为/荣耀的SDK</span></span><br><span class="line"><span class="comment">// 如果华为官方广告标识服务SDK下载失败或编译报错的话，可考虑在 build.gradle 中增加以下配置：</span></span><br><span class="line"><span class="comment">// repositories &#123; maven &#123; url &#x27;https://developer.huawei.com/repo&#x27; &#125; &#125;</span></span><br><span class="line"><span class="comment">// runtimeOnly &quot;com.huawei.hms:ads-identifier:3.4.62.300&quot;</span></span><br><span class="line">exclude group: <span class="string">&#x27;com.huawei.hms&#x27;</span>, <span class="keyword">module</span>: <span class="string">&#x27;ads-identifier&#x27;</span> </span><br><span class="line"><span class="comment">// 荣耀官方广告标识服务SDK同理：      </span></span><br><span class="line"><span class="comment">// repositories &#123; maven &#123; url &#x27;https://developer.hihonor.com/repo&#x27; &#125; &#125;</span></span><br><span class="line"><span class="comment">// runtimeOnly &quot;com.hihonor.mcs:ads-identifier:1.0.2.301&quot;</span></span><br><span class="line">exclude group: <span class="string">&#x27;com.hihonor.mcs&#x27;</span>, <span class="keyword">module</span>: <span class="string">&#x27;ads-identifier&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里，如果在kotlin的dsl中应该这么写exclude group：</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">implementation (<span class="string">&quot;com.github.gzu-liyujiang:Android_CN_OAID:4.2.9&quot;</span>)&#123;</span><br><span class="line">exclude(group = <span class="string">&quot;com.huawei.hms&#x27;, module: &#x27;ads-identifier&quot;</span>)</span><br><span class="line">exclude(group = <span class="string">&quot;&#x27;com.hihonor.mcs&#x27;, module: &#x27;ads-identifier&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">publicclassMainActivityextendsAppCompatActivity&#123;</span><br><span class="line">privateTextViewtextViewOAID;</span><br><span class="line"><span class="meta">@SuppressLint(&quot;MissingInflatedId&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">protectedvoidonCreate(BundlesavedInstanceState)&#123;</span><br><span class="line"><span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">textViewOAID=findViewById(R.id.textViewOAID);</span><br><span class="line"><span class="comment">//DeviceIdentifier.register(this.getApplication());</span></span><br><span class="line"><span class="comment">//获取IMEI，只支持Android10之前的系统，需要READ_PHONE_STATE权限，可能为空</span></span><br><span class="line">DeviceIdentifier.getIMEI(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//获取安卓ID，可能为空</span></span><br><span class="line">DeviceIdentifier.getAndroidID(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//获取数字版权管理ID，可能为空。很鸡肋，在某些手机上还可能造成卡死或闪退，自4.2.7版本后已弃用</span></span><br><span class="line">DeviceIdentifier.getWidevineID();</span><br><span class="line"><span class="comment">//获取伪造ID，根据硬件信息生成，不会为空，有大概率会重复</span></span><br><span class="line">DeviceIdentifier.getPseudoID();</span><br><span class="line"><span class="comment">//获取GUID，随机生成，不会为空</span></span><br><span class="line">DeviceIdentifier.getGUID(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//是否支持OAID/AAID</span></span><br><span class="line">DeviceID.supportedOAID(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//获取OAID/AAID，同步调用</span></span><br><span class="line">DeviceIdentifier.getOAID(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//获取OAID/AAID，异步回调</span></span><br><span class="line">DeviceID.getOAID(<span class="built_in">this</span>,newIGetter()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">publicvoidonOAIDGetComplete(Stringresult)&#123;</span><br><span class="line"><span class="comment">//不同厂商的OAID/AAID格式是不一样的，可进行MD5、SHA1之类的哈希运算统一</span></span><br><span class="line">Log.d(<span class="string">&quot;oaiddemo&quot;</span>,<span class="string">&quot;获取成功:&quot;</span>+result);</span><br><span class="line">textViewOAID.setText(<span class="string">&quot;OAIDValue:&quot;</span>+result);<span class="comment">//更新TextView文本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">publicvoidonOAIDGetError(Exceptionerror)&#123;</span><br><span class="line"><span class="comment">//获取OAID/AAID失败</span></span><br><span class="line">Log.d(<span class="string">&quot;oaiddemo&quot;</span>,<span class="string">&quot;获取失败:&quot;</span>);</span><br><span class="line">textViewOAID.setText(<span class="string">&quot;OAID获取失败&quot;</span>);<span class="comment">//更新TextView文本，表示获取失败</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i-blog.csdnimg.cn/blog_migrate/bccea0afd64305d4b738361dedfe7ed7.png"
                      alt="三方获取结果"
                ><br><strong>对比官方和三方的结果，获取到的OAID，同一台设备是一致的。</strong></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>感谢参考的几篇文档：<br><a class="link"   href="https://blog.csdn.net/Myfittinglife/article/details/121520111" >https://blog.csdn.net/Myfittinglife/article/details/121520111<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/mingtiannihao0522/article/details/104630967" >https://blog.csdn.net/mingtiannihao0522/article/details/104630967<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://juejin.cn/post/6924191966146068493" >https://juejin.cn/post/6924191966146068493<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL,Redis,MongoDB的不同使用场景</title>
    <url>/2025/02/06/MySQL-Redis-MongoDB%E7%9A%84%E4%B8%8D%E5%90%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h2 id="MySQL（关系型数据库）"><a href="#MySQL（关系型数据库）" class="headerlink" title="MySQL（关系型数据库）"></a>MySQL（关系型数据库）</h2><h3 id="场景：用户注册、登录与文章管理"><a href="#场景：用户注册、登录与文章管理" class="headerlink" title="场景：用户注册、登录与文章管理"></a>场景：用户注册、登录与文章管理</h3><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>需要持久化存储用户资料（用户名、密码、邮箱、注册时间等）。</li>
<li>支持复杂查询（如“查找某用户的所有文章并按时间排序”）。</li>
<li>需要事务保证数据一致性（如用户注册时同时写入用户表和权限表）。</li>
</ul>
<p>示例：</p>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户表（users）</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    password_hash <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    created_at DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 文章表（posts）</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> posts (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    content TEXT <span class="keyword">NOT NULL</span>,</span><br><span class="line">    created_at DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (user_id) <span class="keyword">REFERENCES</span> users(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询用户及其最新文章</span></span><br><span class="line"><span class="keyword">SELECT</span> users.username, posts.title, posts.created_at</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">JOIN</span> posts <span class="keyword">ON</span> users.id <span class="operator">=</span> posts.user_id</span><br><span class="line"><span class="keyword">WHERE</span> users.id <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> posts.created_at <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li><p>结构化数据存储，支持复杂 SQL 查询。</p>
</li>
<li><p>ACID 事务保证数据一致性（如转账、订单支付）。</p>
</li>
<li><p>适合长期存储核心业务数据（用户、订单、商品等）。</p>
</li>
</ul>
<h2 id="Redis（键值对数据库）"><a href="#Redis（键值对数据库）" class="headerlink" title="Redis（键值对数据库）"></a>Redis（键值对数据库）</h2><h3 id="场景：用户会话缓存与热门文章排行榜"><a href="#场景：用户会话缓存与热门文章排行榜" class="headerlink" title="场景：用户会话缓存与热门文章排行榜"></a>场景：用户会话缓存与热门文章排行榜</h3><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><ul>
<li><p>快速读写用户会话信息（如登录状态）。</p>
</li>
<li><p>实时统计热门文章点击量并生成排行榜。</p>
</li>
<li><p>缓存用户个人资料，减轻 MySQL 压力。</p>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存用户会话（过期时间 30 分钟）</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.Redis()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户登录成功后缓存会话</span></span><br><span class="line">user_id = <span class="number">123</span></span><br><span class="line">session_token = <span class="string">&quot;abc123xyz&quot;</span></span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">f&quot;session:<span class="subst">&#123;session_token&#125;</span>&quot;</span>, user_id, ex=<span class="number">1800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取会话</span></span><br><span class="line">current_user = r.get(<span class="string">f&quot;session:<span class="subst">&#123;session_token&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存用户个人资料（JSON 格式）</span></span><br><span class="line">user_profile = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">123</span>, <span class="string">&quot;username&quot;</span>: <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;alice@example.com&quot;</span>&#125;</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">f&quot;user_profile:<span class="subst">&#123;user_id&#125;</span>&quot;</span>, json.dumps(user_profile))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章点击量实时统计（使用有序集合）</span></span><br><span class="line">r.zincrby(<span class="string">&quot;article_clicks&quot;</span>, <span class="number">1</span>, <span class="string">&quot;article:456&quot;</span>)  <span class="comment"># 文章 456 点击量 +1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取点击量 Top 10 文章</span></span><br><span class="line">top_articles = r.zrevrange(<span class="string">&quot;article_clicks&quot;</span>, <span class="number">0</span>, <span class="number">9</span>, withscores=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul>
<li><p>内存存储，读写性能极高（每秒数十万次操作）。</p>
</li>
<li><p>支持丰富的数据结构（字符串、哈希、有序集合等）。</p>
</li>
<li><p>适合临时数据（会话）、实时统计、分布式锁等场景。</p>
</li>
</ul>
<h2 id="MongoDB（文档数据库）"><a href="#MongoDB（文档数据库）" class="headerlink" title="MongoDB（文档数据库）"></a>MongoDB（文档数据库）</h2><h3 id="场景：实时聊天消息存储"><a href="#场景：实时聊天消息存储" class="headerlink" title="场景：实时聊天消息存储"></a>场景：实时聊天消息存储</h3><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><ul>
<li><p>存储用户之间的实时聊天消息（文本、图片、表情等）。</p>
</li>
<li><p>消息格式灵活（可能包含动态字段，如消息类型、已读状态、撤回状态）。</p>
</li>
<li><p>快速插入和按时间范围查询历史消息。</p>
</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MongoDB 文档结构（无需预定义 Schema）</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: ObjectId(<span class="string">&quot;6123456789abcdef01234567&quot;</span>),</span><br><span class="line">    <span class="string">&quot;sender_id&quot;</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="string">&quot;receiver_id&quot;</span>: <span class="number">456</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;明天一起吃饭吗？&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,  <span class="comment"># 消息类型：text/image/emoji</span></span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: ISODate(<span class="string">&quot;2023-10-05T14:23:45Z&quot;</span>),</span><br><span class="line">    <span class="string">&quot;read_status&quot;</span>: <span class="literal">False</span>,  <span class="comment"># 是否已读</span></span><br><span class="line">    <span class="string">&quot;metadata&quot;</span>: &#123;  <span class="comment"># 动态扩展字段</span></span><br><span class="line">        <span class="string">&quot;image_url&quot;</span>: <span class="string">&quot;https://example.com/photo.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="string">&quot;height&quot;</span>: <span class="number">600</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询用户 123 和 456 的最近 20 条消息</span></span><br><span class="line">db.messages.find(&#123;</span><br><span class="line">    <span class="string">&quot;$or&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;sender_id&quot;</span>: <span class="number">123</span>, <span class="string">&quot;receiver_id&quot;</span>: <span class="number">456</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;sender_id&quot;</span>: <span class="number">456</span>, <span class="string">&quot;receiver_id&quot;</span>: <span class="number">123</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;).sort(&#123;<span class="string">&quot;timestamp&quot;</span>: -<span class="number">1</span>&#125;).limit(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h3><ul>
<li><p>文档模型灵活，支持动态字段和嵌套结构。</p>
</li>
<li><p>水平扩展能力强，适合海量数据存储（如日志、IoT 数据）。</p>
</li>
<li><p>高吞吐量写入，适合实时消息、评论、日志等场景。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>数据库类型</th>
<th>优势</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>MySQL</td>
<td>结构化数据存储、支持复杂 SQL 查询、事务</td>
<td>长期存储核心业务数据：用户资料、订单、文章</td>
</tr>
<tr>
<td>Redis</td>
<td>内存存储、读写性能极高</td>
<td>快速读写用户会话信息、实时统计热门文章、缓存用户个人资料</td>
</tr>
<tr>
<td>MongoDB</td>
<td>文档模型灵活、支持动态字段和嵌套结构、水平扩展、高吞吐</td>
<td>实时聊天消息存储、实时日志存储</td>
</tr>
</tbody></table>
<p>为什么不用Redis存储所有实时消息？<br>因为Redis虽然快，但数据持久化和存储量可能不如MongoDB合适。<br>为什么不用MySQL存储消息？<br>因为消息结构可能复杂，频繁的插入和查询在关系型数据库中可能效率不高。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Real-ESRGAN 图像和视频AI修复工具使用</title>
    <url>/2025/01/06/Real-ESRGAN-%E5%9B%BE%E5%83%8F%E5%92%8C%E8%A7%86%E9%A2%91AI%E4%BF%AE%E5%A4%8D%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在我们的日常中，对于一些年代比较久远的图片 or 视频，我们希望可以进行一些修复，但是现在很多软件都比较耗费性能，或者需要付费，我们希望有一个比较轻量级的软件，可以进行一些修复，并且可以免费使用。<br>然后在 github 偶然发现了这个工具，记录一下使用的过程和遇到的问题。</p>
<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><blockquote>
<p>工具 github地址 <a class="link"   href="https://github.com/xinntao/Real-ESRGAN" >Real-ESRGAN<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<ol>
<li><p>克隆代码到本地 <code>git clone https://github.com/xinntao/Real-ESRGAN.git</code></p>
</li>
<li><p>安装依赖 <code>pip install basicsr</code><br>这时候遇到了报错，basicsr 安装失败，错误信息</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pip install basicsr</span><br><span class="line">Collecting basicsr</span><br><span class="line">Using cached basicsr-1.4.2.tar.gz (172 kB)</span><br><span class="line">Installing build dependencies ... done</span><br><span class="line">Getting requirements to build wheel ... error</span><br><span class="line">error: subprocess-exited-with-error</span><br><span class="line"></span><br><span class="line">× Getting requirements to build wheel did not run successfully.</span><br><span class="line">│ exit code: 1</span><br><span class="line">╰─&gt; [24 lines of output]</span><br><span class="line">      Traceback (most recent call last):</span><br><span class="line">      File &quot;/Users/topjoy/PycharmProjects/Real-ESRGAN/venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py&quot;, line 353, in &lt;module&gt;</span><br><span class="line">         main()</span><br><span class="line">         ~~~~^^</span><br><span class="line">      File &quot;/Users/topjoy/PycharmProjects/Real-ESRGAN/venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py&quot;, line 335, in main</span><br><span class="line">         json_out[&#x27;return_val&#x27;] = hook(**hook_input[&#x27;kwargs&#x27;])</span><br><span class="line">                                 ~~~~^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File &quot;/Users/topjoy/PycharmProjects/Real-ESRGAN/venv/lib/python3.13/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py&quot;, line 118, in get_requires_for_build_wheel</span><br><span class="line">         return hook(config_settings)</span><br><span class="line">      File &quot;/private/var/folders/h7/b_kcqfhn5t7cs_w3p6ks093w0000gn/T/pip-build-env-gfw___4v/overlay/lib/python3.13/site-packages/setuptools/build_meta.py&quot;, line 334, in get_requires_for_build_wheel</span><br><span class="line">         return self._get_build_requires(config_settings, requirements=[])</span><br><span class="line">               ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File &quot;/private/var/folders/h7/b_kcqfhn5t7cs_w3p6ks093w0000gn/T/pip-build-env-gfw___4v/overlay/lib/python3.13/site-packages/setuptools/build_meta.py&quot;, line 304, in _get_build_requires</span><br><span class="line">         self.run_setup()</span><br><span class="line">         ~~~~~~~~~~~~~~^^</span><br><span class="line">      File &quot;/private/var/folders/h7/b_kcqfhn5t7cs_w3p6ks093w0000gn/T/pip-build-env-gfw___4v/overlay/lib/python3.13/site-packages/setuptools/build_meta.py&quot;, line 522, in run_setup</span><br><span class="line">         super().run_setup(setup_script=setup_script)</span><br><span class="line">         ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">      File &quot;/private/var/folders/h7/b_kcqfhn5t7cs_w3p6ks093w0000gn/T/pip-build-env-gfw___4v/overlay/lib/python3.13/site-packages/setuptools/build_meta.py&quot;, line 320, in run_setup</span><br><span class="line">         exec(code, locals())</span><br><span class="line">         ~~~~^^^^^^^^^^^^^^^^</span><br><span class="line">      File &quot;&lt;string&gt;&quot;, line 149, in &lt;module&gt;</span><br><span class="line">      File &quot;&lt;string&gt;&quot;, line 79, in get_version</span><br><span class="line">      KeyError: &#x27;__version__&#x27;</span><br><span class="line">      [end of output]</span><br><span class="line"></span><br><span class="line">note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">error: subprocess-exited-with-error</span><br><span class="line"></span><br><span class="line">× Getting requirements to build wheel did not run successfully.</span><br><span class="line">│ exit code: 1</span><br><span class="line">╰─&gt; See above for output.</span><br><span class="line">note: This error originates from a subprocess, and is likely not a problem with pip.</span><br></pre></td></tr></table></figure></div>

<p>解决办法：</p>
<ol>
<li>更新 setuptools 和 pip 版本 <code>pip install --upgrade pip setuptools wheel</code></li>
<li>安装 torch、opencv <code>pip install torch opencv-python</code><br>此时因为我本地的python 版本是 3.13，torch 不支持 3.13，官方文档的支持是 3.9～3.12，所以更换使用 3.12 版本<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-06-15-25-33.png"
                      alt="2025-01-06-15-25-33.png"
                ><blockquote>
<p><a class="link"   href="https://pytorch.org/get-started/locally/" >PyTorch<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
</li>
<li>更换版本后，basicsr 安装成功</li>
</ol>
</li>
</ol>
<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>根据官方文档针对于普通图片和动图有两个提供好的模型使用，分别是 RealESRGAN_x4plus 和 RealESRGAN_x4plus_anime_6B</p>
<h3 id="普通图片"><a href="#普通图片" class="headerlink" title="普通图片"></a>普通图片</h3><p>使用模型RealESRGAN_x4plus.pth</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载模型</span></span><br><span class="line">wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -P weights </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推断即运行，源文件放在 inputs 目录下</span></span><br><span class="line">python inference_realesrgan.py -n RealESRGAN_x4plus -i inputs --face_enhance</span><br></pre></td></tr></table></figure></div>

<h3 id="动图"><a href="#动图" class="headerlink" title="动图"></a>动图</h3><p>使用模型RealESRGAN_x4plus_anime_6B</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载模型</span></span><br><span class="line">wget https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth -P weights</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推断即运行，源文件放在 inputs 目录下</span></span><br><span class="line">python inference_realesrgan.py -n RealESRGAN_x4plus_anime_6B -i inputs</span><br></pre></td></tr></table></figure></div>

<p>运行成功后，会在 outputs 目录下生成处理后的图片，可以查看效果。</p>
<h2 id="输出尺寸的自定义"><a href="#输出尺寸的自定义" class="headerlink" title="输出尺寸的自定义"></a>输出尺寸的自定义</h2><p>RealESRGAN_x4plus.pth模型默认使用 X4即4倍的超分辨率，但是可以通过自定义命令参数<code>outscale</code>来修改输出尺寸。</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: python inference_realesrgan.py -n RealESRGAN_x4plus -i infile -o outfile [options]...</span><br><span class="line"></span><br><span class="line">A common command: python inference_realesrgan.py -n RealESRGAN_x4plus -i infile --outscale 3.5 --face_enhance</span><br><span class="line"></span><br><span class="line">  -h                   show this help</span><br><span class="line">  -i --input           Input image or folder. Default: inputs</span><br><span class="line">  -o --output          Output folder. Default: results</span><br><span class="line">  -n --model_name      Model name. Default: RealESRGAN_x4plus</span><br><span class="line">  -s, --outscale       The final upsampling scale of the image. Default: 4</span><br><span class="line">  --suffix             Suffix of the restored image. Default: out</span><br><span class="line">  -t, --tile           Tile size, 0 for no tile during testing. Default: 0</span><br><span class="line">  --face_enhance       Whether to use GFPGAN to enhance face. Default: False</span><br><span class="line">  --fp32               Whether to use half precision during inference. Default: False</span><br><span class="line">  --ext                Image extension. Options: auto | jpg | png, auto means using the same extension as inputs. Default: auto</span><br></pre></td></tr></table></figure></div>

<h2 id="懒人版本"><a href="#懒人版本" class="headerlink" title="懒人版本"></a>懒人版本</h2><p>官方提供了可执行文件，支持 Windows  Linux 和 MacOS，直接下载即可使用。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-06-15-50-40.png"
                      alt="2025-01-06-15-50-40.png"
                ><br>我体验使用了 mac os。</p>
<h3 id="如果是图片"><a href="#如果是图片" class="headerlink" title="如果是图片"></a>如果是图片</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">./realesrgan-ncnn-vulkan.exe -i 输入图像.jpg -o 输出图像.png -n 模型名字</span><br></pre></td></tr></table></figure></div>

<h3 id="如果是视频"><a href="#如果是视频" class="headerlink" title="如果是视频"></a>如果是视频</h3><p>其实原理就是把视频拆分成一帧一帧的图片，先处理一张张图片，然后再合成成视频。</p>
<ol>
<li><p>Use ffmpeg to extract frames from a video (Remember to create the folder <code>tmp_frames</code> ahead)<br>创建解压目录tmp_frames，ffmpeg 需要手动安装一下 <code>brew install ffmpeg</code></p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i onepiece_demo.mp4 -qscale:v 1 -qmin 1 -qmax 1 -vsync 0 tmp_frames/frame%08d.jpg</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Inference with Real-ESRGAN executable file (Remember to create the folder <code>out_frames</code> ahead)<br>创建处理输出目录out_frames，使用模型realesr-animevideov3，放大倍数2，输出格式jpg（也可以使用提供的其他模型）</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">./realesrgan-ncnn-vulkan -i tmp_frames -o out_frames -n realesr-animevideov3 -s 2 -f jpg</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Merge the enhanced frames back into a video<br>把处理输出的图片再集成成视频</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i out_frames/frame%08d.jpg -i onepiece_demo.mp4 -map 0:v:0 -map 1:a:0 -c:a copy -c:v libx264 -r 23.98 -pix_fmt yuv420p output_w_audio.mp4</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="使用效果对比"><a href="#使用效果对比" class="headerlink" title="使用效果对比"></a>使用效果对比</h2><p>这个是我源文件的分辨率的预览<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-06-15-57-52.png"
                      alt="2025-01-06-15-57-52.png"
                ></p>
<p>这个是使用模型RealESRGAN_x4plus.pth处理后的结果，分辨率接近 8K(源文件太大了，直接粘进来很卡就截了一张对比图，可能效果不明显，可以自己体验一下，对比真的很明显)<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-06-15-58-53.png"
                      alt="2025-01-06-15-58-53.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-06-16-01-41.png"
                      alt="2025-01-06-16-01-41.png"
                ></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>图像修复</tag>
      </tags>
  </entry>
  <entry>
    <title>c# 中 method new 和 overide 的差异</title>
    <url>/2025/01/03/c-%E4%B8%AD-method-new-%E5%92%8C-overide-%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-12-55-10.png"
                      alt="001"
                ></p>
<h2 id="new使用"><a href="#new使用" class="headerlink" title="new使用"></a>new使用</h2><div class="code-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Message from BaseClass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 new 隐藏基类中的 ShowMessage 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">ShowMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Message from DerivedClass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        BaseClass baseObj = <span class="keyword">new</span> BaseClass();</span><br><span class="line">        baseObj.ShowMessage();  <span class="comment">// 输出：Message from BaseClass</span></span><br><span class="line">        </span><br><span class="line">        DerivedClass derivedObj = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">        derivedObj.ShowMessage();  <span class="comment">// 输出：Message from DerivedClass</span></span><br><span class="line">        </span><br><span class="line">        BaseClass baseRef = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">        baseRef.ShowMessage();  <span class="comment">// 输出：Message from BaseClass（基类方法被调用，因为它使用基类引用）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="overide使用"><a href="#overide使用" class="headerlink" title="overide使用"></a>overide使用</h2><div class="code-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Message from BaseClass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 override 重写基类的 ShowMessage 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ShowMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Message from DerivedClass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        BaseClass baseObj = <span class="keyword">new</span> BaseClass();</span><br><span class="line">        baseObj.ShowMessage();  <span class="comment">// 输出：Message from BaseClass</span></span><br><span class="line">        </span><br><span class="line">        DerivedClass derivedObj = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">        derivedObj.ShowMessage();  <span class="comment">// 输出：Message from DerivedClass</span></span><br><span class="line">        </span><br><span class="line">        BaseClass baseRef = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">        baseRef.ShowMessage();  <span class="comment">// 输出：Message from DerivedClass（调用派生类的方法）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate or hexo g</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy or hexo d</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>python设置镜像源临时和永久两种方式</title>
    <url>/2025/01/21/python%E8%AE%BE%E7%BD%AE%E9%95%9C%E5%83%8F%E6%BA%90%E4%B8%B4%E6%97%B6%E5%92%8C%E6%B0%B8%E4%B9%85%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在安装某些python packages的时候因为国内的网络问题可能导致安装失败，所以需要切换到国内的镜像源。</p>
<h2 id="临时"><a href="#临时" class="headerlink" title="临时"></a>临时</h2><p>trusted-host是添加域名信任，-i 后面跟镜像源</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests -I --trusted-host pypi.tuna.tsinghua.edu.cn -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>

<h2 id="永久"><a href="#永久" class="headerlink" title="永久"></a>永久</h2><p>trusted-host是添加域名信任</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">pip config set global.trusted-host &quot;pypi.tuna.tsinghua.edu.cn&quot;   </span><br></pre></td></tr></table></figure></div>

<h2 id="常见的镜像网站如下"><a href="#常见的镜像网站如下" class="headerlink" title="常见的镜像网站如下"></a>常见的镜像网站如下</h2><p>中国科技大学 <a class="link"   href="https://pypi.mirrors.ustc.edu.cn/simple" >https://pypi.mirrors.ustc.edu.cn/simple<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>清华：<a class="link"   href="https://pypi.tuna.tsinghua.edu.cn/simple" >https://pypi.tuna.tsinghua.edu.cn/simple<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>阿里云：<a class="link"   href="http://mirrors.aliyun.com/pypi/simple" >http://mirrors.aliyun.com/pypi/simple<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>华中理工大学：<a class="link"   href="http://pypi.hustunique.com/" >http://pypi.hustunique.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>山东理工大学：<a class="link"   href="http://pypi.sdutlinux.org/" >http://pypi.sdutlinux.org/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>豆瓣：<a class="link"   href="http://pypi.douban.com/simple" >http://pypi.douban.com/simple<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>unity strip level导致的编译运行问题</title>
    <url>/2025/02/13/unity-strip-level%E5%AF%BC%E8%87%B4%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>unity 导出的 webGL 微信小程序，运行时，总是报错方法签名异常，以及某些实例初始化失败，再三确认后代码逻辑没有问题，但是报错依旧存在。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-02-17-11-03-15.png"
                      alt="2025-02-17-11-03-15.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-02-17-11-03-28.png"
                      alt="2025-02-17-11-03-28.png"
                ></p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><ol>
<li><p>projects settings 中的managed stripping level 设置为 high，导致unity导出的webgl代码中，部分方法被切割删除，导致运行时，报错。</p>
</li>
<li><p>Unity 会在构建过程中对代码进行裁剪，以减小最终应用的体积，尤其是在进行 IL2CPP 或 AOT（Ahead of Time）编译时。默认情况下，Unity 会剔除所有未被直接使用的代码，这就会导致<br>可能会误删一些通过<code>反射</code>等方式间接调用的类、方法或字段。</p>
</li>
<li><p>当设置 managed stripping level 为 high 时，Unity 会更激进地剔除代码，可能会误删一些你需要的程序集或功能，因此你需要通过 link.xml 文件显式地保留这些程序集中的内容。</p>
</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>添加 link.xml</p>
<p>在 Unity 项目中，link.xml 文件的作用是告诉 Unity 编译器在进行代码裁剪（stripping）时，哪些程序集、类、方法或字段应该被保留，而不被剔除。</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;?xml</span> <span class="string">version=&quot;1.0&quot;</span> <span class="string">encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;linker&gt;</span></span><br><span class="line">    <span class="string">&lt;assembly</span> <span class="string">fullname=&quot;ZeusSDK&quot;</span> <span class="string">preserve=&quot;all&quot;/&gt;</span></span><br><span class="line">    <span class="string">&lt;assembly</span> <span class="string">fullname=&quot;Granite&quot;</span> <span class="string">preserve=&quot;all&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;/linker&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这段代码的作用是告诉 Unity 保留 ZeusSDK 和 Granite 这两个程序集中的所有类和成员，无论它们是否被直接引用。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>unituy3D</tag>
      </tags>
  </entry>
  <entry>
    <title>unitypackage类型文件解压,import,export</title>
    <url>/2025/01/07/unitypackage%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B-import-export/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>痛点：</p>
<p>在 2019 版本的 unity 编辑器中，会将 iOS 依赖的<code>.bundle</code>,<code>.framework</code>文件识别为一个目录的格式，而 2022 版本的 unity 编辑器会将其识别为一个文件，导致现存的 export 的脚本无法正常导出这两种类型的文件，最终生成的 unitypackage 文件中会缺少<code>.bundle</code>,<code>.framework</code></p>
<p>解决办法：</p>
<p>查询和 GPT 无果后决定使用最简单的方式，把<code>.bundle</code>,<code>.framework</code>文件作为一个文件类型导出。</p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>源代码</p>
<div class="code-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> packageName = <span class="string">&quot;ZeusSDK.unitypackage&quot;</span>;</span><br><span class="line"><span class="comment">//需要添加到unitypackage的目录</span></span><br><span class="line"><span class="built_in">string</span>[] dirs = <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Adjust&quot;</span>, <span class="string">&quot;Editor&quot;</span>, <span class="string">&quot;ExternalDependencyManager&quot;</span>, <span class="string">&quot;GravityEngine&quot;</span>, <span class="string">&quot;Resources&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ThinkingAnalytics&quot;</span>, <span class="string">&quot;WebGLTemplates&quot;</span>, <span class="string">&quot;WX-WASM-SDK-V2&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">locationPathName += <span class="string">&quot;/&quot;</span> + packageName; </span><br><span class="line"><span class="comment">//需要打包的资源</span></span><br><span class="line">List&lt;Object&gt; objs = <span class="keyword">new</span> List&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要打包的资源的路径</span></span><br><span class="line">List&lt;<span class="built_in">string</span>[]&gt; assets = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>[]&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> dir <span class="keyword">in</span> dirs)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">$&quot;dir:<span class="subst">&#123;dir&#125;</span>&quot;</span>);</span><br><span class="line">    assets.Add(Directory.GetFiles(Application.dataPath + <span class="string">&quot;/&quot;</span> + dir, <span class="string">&quot;*&quot;</span>, SearchOption.AllDirectories));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历每一个路径，单独加载</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; assets.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> strPath <span class="keyword">in</span> assets[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> strTempPath = strPath;</span><br><span class="line">        <span class="comment">//截取我们需要的相对路径</span></span><br><span class="line">        strTempPath = strTempPath.Substring(strTempPath.IndexOf(<span class="string">&quot;Assets&quot;</span>));</span><br><span class="line">        <span class="comment">//过滤meta文件</span></span><br><span class="line">        <span class="keyword">if</span> (strTempPath.EndsWith(<span class="string">&quot;.meta&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据路径加载资源</span></span><br><span class="line">        Object obj = AssetDatabase.LoadAssetAtPath(strTempPath, <span class="keyword">typeof</span>(Object));</span><br><span class="line">        objs.Add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> assetPathNames = <span class="keyword">new</span> <span class="built_in">string</span>[objs.Count];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取每个资源的相对路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; assetPathNames.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    assetPathNames[i] = AssetDatabase.GetAssetPath(objs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取与资源有依赖关系的所有资源列表</span></span><br><span class="line">assetPathNames = AssetDatabase.GetDependencies(assetPathNames);</span><br><span class="line"></span><br><span class="line"><span class="comment">//排除项目有可能生成的文件，防止与项目冲突，使用文档指导配置过程</span></span><br><span class="line"><span class="built_in">string</span> androidRoot = <span class="string">&quot;Assets/Plugins/Android/&quot;</span>;</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; excludeFiles = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;&#123;</span><br><span class="line">    <span class="string">&quot;Assets/Editor/ExportPackage.cs&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;baseProjectTemplate.gradle&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;launcherTemplate.gradle&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;mainTemplate.gradle&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;gradleTemplate.properties&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;LauncherManifest.xml&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;AndroidManifest.xml&quot;</span>,</span><br><span class="line">    androidRoot + <span class="string">&quot;google-services.json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Assets/Plugins/iOS/ZeusSDK/ZeusSDKInfo.plist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Assets/Plugins/iOS/ZeusSDK/GoogleService-Info.plist&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; exportAssets = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">string</span> assetPath <span class="keyword">in</span> assetPathNames)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!excludeFiles.Contains(assetPath))&#123;</span><br><span class="line">        exportAssets.Add(assetPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打包Package 最后三个参数分别是:导出操作将异步运行，在导出完成之后在文件浏览窗口显示导出包文件 | 将通过任何子目录列表递归并包含所有资源 | 除了列出的资产路径，所有相关资产将被包括在内</span></span><br><span class="line">AssetDatabase.ExportPackage(exportAssets.ToArray(), locationPathName, ExportPackageOptions.Recurse | ExportPackageOptions.IncludeDependencies);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol>
<li>调用<code>Directory.GetFiles</code>去遍历所有的目录，对于<code>.bundle</code>,<code>.framework</code>文件，<code>Directory.GetFiles</code>可以识别为目录，并且找到下面的所有子目录和文件</li>
<li>但是对于<code>AssetDatabase.LoadAssetAtPath</code>无法将路径中包含<code>.bundle</code>,<code>.framework</code>的文件识别为一个objeject，那么导致添加到 objs 中的都是 null</li>
<li>从而导致<code>AssetDatabase.GetAssetPath</code>去获取路径的时候无法获取到，最终导致<code>AssetDatabase.ExportPackage</code>导出的unitypackage 中缺少路径中包含 <code>.bundle</code>,<code>.framework</code>的文件</li>
</ol>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol>
<li>刚开始想看看有没有人遇到类似问题以及解决，但是没发现有人问类似的问题</li>
<li>然后看了一下 unity 官方 api 文档，也没有针对于 .bundle, .framework 文件的特殊处理</li>
<li>所以最终决定用最粗暴的把路径名中包含<code>.bundle</code>,<code>.framework</code>的文件，找到<code>.bundle</code>,<code>.framework</code>这一级作为付目录，直接导出<code>.bundle</code>,<code>.framework</code>文件<br>即：<br>如果路径为<code>abc/def/g.bundle/xxx/xx</code>，<code>abc/def/g.bundle/xxx</code>则只导出<code>abc/def/g.bundle</code>文件，<code>.framework</code>文件&#96; 同理</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 辅助函数：提取 .bundle 和 .framework文件的父目录路径</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAssetDirectory</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">string</span> extension</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> extensionIndex = path.IndexOf(extension);</span><br><span class="line">    <span class="keyword">if</span> (extensionIndex == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从路径中提取出扩展名对应的文件目录</span></span><br><span class="line">    <span class="keyword">return</span> path.Substring(<span class="number">0</span>, extensionIndex + extension.Length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查路径中是否包含 .bundle 文件</span></span><br><span class="line"><span class="keyword">if</span> (strTempPath.Contains(<span class="string">&quot;.bundle&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 提取 .bundle 文件的父目录</span></span><br><span class="line">    <span class="built_in">string</span> bundleDirectory = GetAssetDirectory(strTempPath, <span class="string">&quot;.bundle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前已经处理过这个 bundle 目录，就跳过</span></span><br><span class="line">    <span class="keyword">if</span> (processedBundles.Contains(bundleDirectory))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记此 bundle 目录已经处理过</span></span><br><span class="line">    processedBundles.Add(bundleDirectory);</span><br><span class="line">    <span class="comment">// 加载 .bundle 文件并直接作为一个资源添加</span></span><br><span class="line">    Object asset = AssetDatabase.LoadAssetAtPath(bundleDirectory, <span class="keyword">typeof</span>(Object));</span><br><span class="line">    <span class="keyword">if</span> (asset != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        objs.Add(asset); <span class="comment">// 直接添加整个 .bundle 文件</span></span><br><span class="line">        Debug.Log(<span class="string">$&quot;Added .bundle file as asset: <span class="subst">&#123;bundleDirectory&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.LogWarning(<span class="string">$&quot;Failed to load .bundle asset: <span class="subst">&#123;bundleDirectory&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (strTempPath.Contains(<span class="string">&quot;.framework&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 提取 .framework 文件的目录</span></span><br><span class="line">    <span class="built_in">string</span> frameworkDirectory = GetAssetDirectory(strTempPath, <span class="string">&quot;.framework&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前已经处理过这个 .framework 目录，就跳过</span></span><br><span class="line">    <span class="keyword">if</span> (processedBundles.Contains(frameworkDirectory))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记此 .framework 目录已经处理过</span></span><br><span class="line">    processedBundles.Add(frameworkDirectory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载 .framework 文件并直接作为一个资源添加</span></span><br><span class="line">    Object asset = AssetDatabase.LoadAssetAtPath(frameworkDirectory, <span class="keyword">typeof</span>(Object));</span><br><span class="line">    <span class="keyword">if</span> (asset != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        objs.Add(asset); <span class="comment">// 直接添加整个 .framework 文件</span></span><br><span class="line">        Debug.Log(<span class="string">$&quot;Added .framework file as asset: <span class="subst">&#123;frameworkDirectory&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.LogWarning(<span class="string">$&quot;Failed to load .framework asset: <span class="subst">&#123;frameworkDirectory&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>对于以这种方式导出的unitypackage，是否和 unity 编辑器本身的导出方式一致，需要测试</p>
<ol>
<li>使用脚本导出文件大小和使用 unity 编辑器的窗口工具导出大小一致<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-07-18-00-58.png"
                      alt="2025-01-07-18-00-58.png"
                ></li>
<li>使用空工程先后导入两个 package，不存在文件 new 差异<br>遇到的问题是即使导入完全一样的 package 两次，.png, .strings, .h, .plist, .nib 这些文件会被再次标记为 new，即使是使用 unity 的 aeests export package 导出的包也是如此，所以可以认为脚本导出的包该行为不存在问题</li>
<li>import 导入脚本导出的项目后测试功能正常</li>
</ol>
<h2 id="其他tips"><a href="#其他tips" class="headerlink" title="其他tips"></a>其他tips</h2><p>本来想通过解压 unitypackage 然后结合 beyond compare 来比较两个包，但是发现解压之后包中的文件过多，以及一些<code>.meta</code>文件导致的差异无法忽略，所以最有效的方式还是分别 import 的形式进行比较。</p>
<p>unitypackage 解压命令</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf abc.unitypackage -C temp</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>unity3D</tag>
      </tags>
  </entry>
  <entry>
    <title>对对碰游戏概率计算</title>
    <url>/2025/01/03/%E5%AF%B9%E5%AF%B9%E7%A2%B0%E6%B8%B8%E6%88%8F%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h2 id="🎮游戏规则"><a href="#🎮游戏规则" class="headerlink" title="🎮游戏规则"></a>🎮游戏规则</h2><ol>
<li>牌堆包含 1-9 每个数字 5 张，以及一张 luck 运气牌，总共 46 张牌；</li>
<li>游戏开始，选择一个许愿数字，初始化游戏区从牌堆随机抽取 9 张牌，抽走后，牌堆需要去除这9张牌；</li>
<li>游戏区每次匹配2张相同数字的牌，得 1 分，移除匹配牌并从牌堆抽取补充 1 张新牌，随机补充的牌是可能和游戏区的数字相同的；</li>
<li>如果游戏区出现luck运气牌则从牌堆抽取补充 3 张新牌，补充的3张牌之间可能相同，也可能不同，补充的3张牌是可能和游戏区的数字相同的；</li>
<li>如果游戏区出现许愿数字，匹配2张该许愿数字的牌后，不仅补充 1 张牌，还要从牌堆抽取补充 2 张额外的牌，总共从牌堆抽取补充 3 张；</li>
<li>如果最终得分大于等于5，那么再从牌堆抽取1张，如果出现匹配2张相同数字的牌，则重复上述操作，然后再计算最终得分；</li>
<li>记录每次模拟得到最高得分，并记录得到最高得分时的匹配和补充牌的详情；</li>
<li>每次模拟次数1w次；</li>
<li>最后统计每个分值出现次数，并生成正态分布图。</li>
</ol>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化牌堆：包含1-9每个数字5张，以及1张luck运气牌</span></span><br><span class="line">deck = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)] + [<span class="string">&#x27;luck&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(deck)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则参数</span></span><br><span class="line">initial_game_zone_size = <span class="number">9</span>  <span class="comment"># 初始游戏区的牌数</span></span><br><span class="line">max_card_count = <span class="number">5</span>  <span class="comment"># 每个数字出现的最大次数</span></span><br><span class="line">max_luck_count = <span class="number">1</span>  <span class="comment"># 运气牌最大出现次数</span></span><br><span class="line">max_total_cards = <span class="number">46</span>  <span class="comment"># 总牌数上限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 游戏区的初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_initial_game_zone</span>():</span><br><span class="line">    <span class="built_in">print</span>(random.sample(deck, initial_game_zone_size))</span><br><span class="line">    <span class="keyword">return</span> random.sample(deck, initial_game_zone_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从牌堆中随机抽取牌</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_from_deck</span>(<span class="params">deck, total_counter</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> deck:  <span class="comment"># 检查牌堆是否为空</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;牌堆已空，无法继续抽牌！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 避免违反规则：检查每个数字和运气牌的数量</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        card = random.choice(deck)  <span class="comment"># 选择一个元素不做删除</span></span><br><span class="line">        total_counter.update([card])</span><br><span class="line">        <span class="comment"># 统计游戏区中每个卡牌的数量</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(card, <span class="built_in">int</span>) <span class="keyword">and</span> total_counter[card] &gt; max_card_count:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果该数字的出现次数已达到上限，继续选择</span></span><br><span class="line">        <span class="keyword">elif</span> card == <span class="string">&#x27;luck&#x27;</span> <span class="keyword">and</span> total_counter[<span class="string">&#x27;luck&#x27;</span>] &gt; max_luck_count:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果运气牌已达到上限，继续选择</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(deck) &gt; max_total_cards:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果总牌数超出上限，继续选择</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 一旦选中符合条件的卡牌，就可以返回</span></span><br><span class="line">        deck.remove(card)  <span class="comment"># 从排堆拿走抽走的牌</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行游戏</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_game</span>():</span><br><span class="line">    score = <span class="number">0</span></span><br><span class="line">    deck_copy = deck.copy()  <span class="comment"># 副本用来模拟游戏</span></span><br><span class="line">    <span class="comment"># 用于统计所有曾经出现过的卡片的总次数</span></span><br><span class="line">    game_zone = draw_initial_game_zone()  <span class="comment"># 随机抽取9张牌</span></span><br><span class="line">    game_zone_counter = Counter(game_zone)</span><br><span class="line">    <span class="comment"># 用于统计所有曾经出现过的卡片的总次数</span></span><br><span class="line">    total_counter = Counter(game_zone)  <span class="comment"># 计算每个数字在游戏区中的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机选择许愿数字，范围从1到9</span></span><br><span class="line">    wish_number = random.choice(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;本轮游戏的许愿数字是: <span class="subst">&#123;wish_number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;初始游戏区: <span class="subst">&#123;game_zone&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录抽牌顺序</span></span><br><span class="line">    draw_sequence = []</span><br><span class="line">    game_zone_history = []  <span class="comment"># 用于记录游戏区每次的变化</span></span><br><span class="line">    card_additions = []  <span class="comment"># 用于记录每一步补充了哪些牌以及补充的原因</span></span><br><span class="line">    current_total_counter = []</span><br><span class="line">    additional_card_step = <span class="literal">None</span>  <span class="comment"># 用于标记哪一步因为得分大于等于5而增加了一张牌</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">any</span>(count &gt;= <span class="number">2</span> <span class="keyword">for</span> count <span class="keyword">in</span> game_zone_counter.values()):  <span class="comment"># 游戏继续直到没有可匹配的牌</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;当前游戏区: <span class="subst">&#123;game_zone&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;当前得分: <span class="subst">&#123;score&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录当前游戏区的状态</span></span><br><span class="line">        game_zone_history.append(game_zone.copy())</span><br><span class="line">        current_total_counter.append(total_counter.copy())</span><br><span class="line">        <span class="comment"># 查找是否有可以匹配的数字（数量大于等于2）</span></span><br><span class="line">        matched = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> number, count <span class="keyword">in</span> game_zone_counter.items():</span><br><span class="line">            <span class="keyword">if</span> count &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;匹配数字 <span class="subst">&#123;number&#125;</span>，得分 +1&quot;</span>)</span><br><span class="line">                <span class="comment"># 记录需要删除的索引</span></span><br><span class="line">                to_remove_indices = []</span><br><span class="line">                <span class="comment"># 确保只移除前两个</span></span><br><span class="line">                removed_count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i, card <span class="keyword">in</span> <span class="built_in">enumerate</span>(game_zone):</span><br><span class="line">                    <span class="keyword">if</span> card == number <span class="keyword">and</span> removed_count &lt; <span class="number">2</span>:</span><br><span class="line">                        to_remove_indices.append(i)</span><br><span class="line">                        removed_count += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> removed_count == <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">break</span>  <span class="comment"># 已经移除两个，跳出循环</span></span><br><span class="line">                <span class="comment"># 删除记录的卡牌</span></span><br><span class="line">                <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">sorted</span>(to_remove_indices, reverse=<span class="literal">True</span>):  <span class="comment"># 反向删除避免索引变化</span></span><br><span class="line">                    game_zone.pop(index)</span><br><span class="line"></span><br><span class="line">                score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 处理补充牌的部分，确保每次只补充3张牌</span></span><br><span class="line">                <span class="keyword">if</span> number == wish_number:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;许愿数字 <span class="subst">&#123;number&#125;</span> 匹配成功，补充3张牌&quot;</span>)</span><br><span class="line">                    added_cards = []  <span class="comment"># 用来记录补充的卡牌</span></span><br><span class="line">                    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        new_card = draw_from_deck(deck_copy, total_counter)</span><br><span class="line">                        game_zone.append(new_card)  <span class="comment"># 将新卡加入游戏区</span></span><br><span class="line">                        added_cards.append(new_card)  <span class="comment"># 将新卡加入记录的补充卡牌列表</span></span><br><span class="line">                        draw_sequence.append(new_card)  <span class="comment"># 记录抽牌顺序</span></span><br><span class="line">                    card_additions.append((added_cards, <span class="string">f&quot;许愿数字 <span class="subst">&#123;number&#125;</span> 匹配成功，补充3张牌:<span class="subst">&#123;added_cards&#125;</span>&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;补充1张牌到游戏区&quot;</span>)</span><br><span class="line">                    added_cards = [draw_from_deck(deck_copy, total_counter)]</span><br><span class="line">                    game_zone.extend(added_cards)  <span class="comment"># 扩展游戏区，添加1张牌</span></span><br><span class="line">                    card_additions.append((added_cards, <span class="string">f&quot;匹配数字 <span class="subst">&#123;number&#125;</span>，补充1张牌<span class="subst">&#123;added_cards&#125;</span>&quot;</span>))</span><br><span class="line">                    draw_sequence.extend(added_cards)  <span class="comment"># 记录抽牌顺序充1张牌&quot;))</span></span><br><span class="line"></span><br><span class="line">                matched = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 在一轮中匹配一对即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果抽到运气牌，补充3张新牌</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;luck&#x27;</span> <span class="keyword">in</span> game_zone:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;运气牌触发，补充3张牌&quot;</span>)</span><br><span class="line">            game_zone.remove(<span class="string">&#x27;luck&#x27;</span>)</span><br><span class="line">            added_cards = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                new_card = draw_from_deck(deck_copy, total_counter)</span><br><span class="line">                game_zone.append(new_card)</span><br><span class="line">                added_cards.append(new_card)</span><br><span class="line">                draw_sequence.append(new_card)  <span class="comment"># 记录抽牌顺序</span></span><br><span class="line">            card_additions.append((added_cards, <span class="string">&quot;运气牌触发，补充3张牌&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新game_zone_counter</span></span><br><span class="line">        game_zone_counter = Counter(game_zone)</span><br><span class="line">        <span class="built_in">print</span>(game_zone_counter)</span><br><span class="line">        <span class="comment"># 如果没有匹配的牌并且没有运气牌，结束游戏</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matched <span class="keyword">and</span> <span class="string">&#x27;luck&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> game_zone:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正常游戏结束！最终得分：<span class="subst">&#123;score&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 记录正常游戏结束后游戏区</span></span><br><span class="line">    game_zone_history.append(game_zone.copy())</span><br><span class="line">    current_total_counter.append(total_counter.copy())</span><br><span class="line">    <span class="comment"># 额外规则：如果得分大于等于5，并且牌堆中还有牌，继续抽一张牌</span></span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">5</span> <span class="keyword">and</span> deck_copy:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;得分大于等于5，奶一口继续从牌堆中抽一张牌并计算新的得分。&quot;</span>)</span><br><span class="line">        <span class="comment"># new_card = draw_from_deck(deck_copy, total_counter)</span></span><br><span class="line">        <span class="comment"># game_zone.append(new_card)</span></span><br><span class="line">        <span class="comment"># draw_sequence.append(new_card)  # 记录抽牌顺序</span></span><br><span class="line">        <span class="comment"># additional_card_step = len(game_zone_history) + 1  # 标记在哪一步增加了一张牌</span></span><br><span class="line">        <span class="comment"># print(f&quot;奶一口新抽取的牌: &#123;new_card&#125;&quot;)</span></span><br><span class="line">        added_cards = [draw_from_deck(deck_copy, total_counter)]</span><br><span class="line">        game_zone.extend(added_cards)  <span class="comment"># 扩展游戏区，添加1张牌</span></span><br><span class="line">        game_zone_history.append(game_zone.copy())</span><br><span class="line">        current_total_counter.append(total_counter.copy())</span><br><span class="line">        card_additions.append((added_cards, <span class="string">f&quot;满足奶一口规则，补充1张牌<span class="subst">&#123;added_cards&#125;</span>&quot;</span>))</span><br><span class="line">        draw_sequence.extend(added_cards)  <span class="comment"># 记录抽牌顺序充1张牌&quot;))</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;奶一口新抽取的牌: <span class="subst">&#123;added_cards&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新计算得分</span></span><br><span class="line">        game_zone_counter = Counter(game_zone)</span><br><span class="line">        new_score = score</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找奶一口后是否有可以匹配的数字（数量大于等于2）</span></span><br><span class="line">        milk_matched = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 查找是否有可以匹配的数字（数量大于等于2）</span></span><br><span class="line">        <span class="keyword">for</span> number, count <span class="keyword">in</span> game_zone_counter.items():</span><br><span class="line">            <span class="keyword">if</span> count &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;奶一口后匹配数字 <span class="subst">&#123;number&#125;</span>，得分 +1&quot;</span>)</span><br><span class="line">                <span class="comment"># 记录需要删除的索引</span></span><br><span class="line">                to_remove_indices = []</span><br><span class="line">                <span class="comment"># 确保只移除前两个</span></span><br><span class="line">                removed_count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i, card <span class="keyword">in</span> <span class="built_in">enumerate</span>(game_zone):</span><br><span class="line">                    <span class="keyword">if</span> card == number <span class="keyword">and</span> removed_count &lt; <span class="number">2</span>:</span><br><span class="line">                        to_remove_indices.append(i)</span><br><span class="line">                        removed_count += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> removed_count == <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">break</span>  <span class="comment"># 已经移除两个，跳出循环</span></span><br><span class="line">                <span class="comment"># 删除记录的卡牌</span></span><br><span class="line">                <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">sorted</span>(to_remove_indices, reverse=<span class="literal">True</span>):  <span class="comment"># 反向删除避免索引变化</span></span><br><span class="line">                    game_zone.pop(index)</span><br><span class="line"></span><br><span class="line">                new_score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 处理补充牌的部分，确保每次只补充3张牌</span></span><br><span class="line">                <span class="keyword">if</span> number == wish_number:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;奶一口后许愿数字 <span class="subst">&#123;number&#125;</span> 匹配成功，补充3张牌&quot;</span>)</span><br><span class="line">                    added_cards = []  <span class="comment"># 用来记录补充的卡牌</span></span><br><span class="line">                    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        new_card = draw_from_deck(deck_copy, total_counter)</span><br><span class="line">                        game_zone.append(new_card)  <span class="comment"># 将新卡加入游戏区</span></span><br><span class="line">                        added_cards.append(new_card)  <span class="comment"># 将新卡加入记录的补充卡牌列表</span></span><br><span class="line">                        draw_sequence.append(new_card)  <span class="comment"># 记录抽牌顺序</span></span><br><span class="line">                    game_zone_history.append(game_zone.copy())</span><br><span class="line">                    current_total_counter.append(total_counter.copy())</span><br><span class="line">                    card_additions.append((added_cards, <span class="string">f&quot;奶一口后许愿数字 <span class="subst">&#123;number&#125;</span> 匹配成功，补充3张牌:<span class="subst">&#123;added_cards&#125;</span>&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;奶一口后补充1张牌到游戏区&quot;</span>)</span><br><span class="line">                    added_cards = [draw_from_deck(deck_copy, total_counter)]</span><br><span class="line">                    game_zone.extend(added_cards)  <span class="comment"># 扩展游戏区，添加1张牌</span></span><br><span class="line">                    game_zone_history.append(game_zone.copy())</span><br><span class="line">                    current_total_counter.append(total_counter.copy())</span><br><span class="line">                    card_additions.append((added_cards, <span class="string">f&quot;奶一口后匹配数字 <span class="subst">&#123;number&#125;</span>，补充1张牌<span class="subst">&#123;added_cards&#125;</span>&quot;</span>))</span><br><span class="line">                    draw_sequence.extend(added_cards)  <span class="comment"># 记录抽牌顺序充1张牌&quot;))</span></span><br><span class="line"></span><br><span class="line">                milk_matched = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 在一轮中匹配一对即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果抽到运气牌，补充3张新牌</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;luck&#x27;</span> <span class="keyword">in</span> game_zone:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;奶一口后运气牌触发，补充3张牌&quot;</span>)</span><br><span class="line">            game_zone.remove(<span class="string">&#x27;luck&#x27;</span>)</span><br><span class="line">            added_cards = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                new_card = draw_from_deck(deck_copy, total_counter)</span><br><span class="line">                game_zone.append(new_card)</span><br><span class="line">                added_cards.append(new_card)</span><br><span class="line">                draw_sequence.append(new_card)  <span class="comment"># 记录抽牌顺序</span></span><br><span class="line">            game_zone_history.append(game_zone.copy())</span><br><span class="line">            current_total_counter.append(total_counter.copy())</span><br><span class="line">            card_additions.append((added_cards, <span class="string">&quot;奶一口后运气牌触发，补充3张牌&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新game_zone_counter</span></span><br><span class="line">        game_zone_counter = Counter(game_zone)</span><br><span class="line">        <span class="built_in">print</span>(game_zone_counter)</span><br><span class="line">        <span class="comment"># 如果没有匹配的牌并且没有运气牌，结束游戏</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> milk_matched <span class="keyword">and</span> <span class="string">&#x27;luck&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> game_zone:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;奶一口后也无法再加分&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;奶一口之后的新得分：<span class="subst">&#123;new_score&#125;</span>&quot;</span>)</span><br><span class="line">        score = new_score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score, draw_sequence, wish_number, game_zone_history,current_total_counter, card_additions, additional_card_step  <span class="comment"># 返回得分、抽牌顺序、许愿数字和增加牌的步骤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟多次游戏，计算不同分数出现的频率</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">monte_carlo_simulation</span>(<span class="params">num_simulations=<span class="number">500000</span></span>):</span><br><span class="line">    highest_score = <span class="number">0</span></span><br><span class="line">    highest_score_sequence = []  <span class="comment"># 记录最高得分时的抽牌顺序</span></span><br><span class="line">    highest_wish_number = <span class="literal">None</span>  <span class="comment"># 记录最高得分时的许愿数字</span></span><br><span class="line">    highest_game_zone_history = []  <span class="comment"># 记录最高得分时的游戏区变化</span></span><br><span class="line">    highest_current_total_counter = []</span><br><span class="line">    highest_card_additions = []  <span class="comment"># 记录最高得分时的每步牌补充详情</span></span><br><span class="line">    highest_additional_card_step = <span class="literal">None</span>  <span class="comment"># 记录最高得分时增加牌的步骤</span></span><br><span class="line">    scores = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_simulations):</span><br><span class="line">        score, draw_sequence, wish_number, game_zone_history, current_total_counter,card_additions, additional_card_step = play_game()</span><br><span class="line">        scores.append(score)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跟踪最高得分的模拟</span></span><br><span class="line">        <span class="keyword">if</span> score &gt; highest_score:</span><br><span class="line">            highest_score = score</span><br><span class="line">            highest_score_sequence = draw_sequence</span><br><span class="line">            highest_wish_number = wish_number</span><br><span class="line">            highest_game_zone_history = game_zone_history</span><br><span class="line">            highest_current_total_counter  = current_total_counter</span><br><span class="line">            highest_card_additions = card_additions</span><br><span class="line">            highest_additional_card_step = additional_card_step</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制得分分布</span></span><br><span class="line">    plt.hist(scores, bins=<span class="built_in">range</span>(<span class="built_in">min</span>(scores), <span class="built_in">max</span>(scores) + <span class="number">1</span>), edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;得分&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;出现次数&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">f&#x27;游戏得分分布（模拟 <span class="subst">&#123;num_simulations&#125;</span> 次）&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> highest_score, highest_score_sequence, highest_wish_number, highest_game_zone_history,highest_current_total_counter, highest_card_additions, highest_additional_card_step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行多次模拟</span></span><br><span class="line">highest_score, highest_score_sequence, highest_wish_number, highest_game_zone_history,highest_current_total_counter, highest_card_additions, highest_additional_card_step = monte_carlo_simulation()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高得分: <span class="subst">&#123;highest_score&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高得分时的抽牌顺序: <span class="subst">&#123;highest_score_sequence&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高得分时的许愿数字: <span class="subst">&#123;highest_wish_number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印最高得分时的游戏区变化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高得分时的游戏区变化:&quot;</span>)</span><br><span class="line"><span class="comment"># for idx, history in enumerate(highest_game_zone_history, start=1):</span></span><br><span class="line"><span class="keyword">for</span> idx, (history, used_count) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(highest_game_zone_history, highest_current_total_counter), start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;步骤 <span class="subst">&#123;idx&#125;</span>: <span class="subst">&#123;history&#125;</span>，已经用掉的卡牌次数：<span class="subst">&#123;used_count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每步牌补充的详细信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高得分时的每步牌补充详情:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, (cards, reason) <span class="keyword">in</span> <span class="built_in">enumerate</span>(highest_card_additions, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;步骤 <span class="subst">&#123;idx&#125;</span>: <span class="subst">&#123;reason&#125;</span> -&gt; 补充了: <span class="subst">&#123;cards&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高得分时增加牌的步骤: <span class="subst">&#123;highest_additional_card_step&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="游戏结果"><a href="#游戏结果" class="headerlink" title="游戏结果"></a>游戏结果</h2><p>正态分布图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-35-53.png"
                      alt="2025-01-03-18-35-53"
                ><br>最高得分计算<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-01-03-18-36-26.png"
                      alt="2025-01-03-18-36-26.png"
                ></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>工具合集</title>
    <url>/2025/02/08/%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h2 id="json处理"><a href="#json处理" class="headerlink" title="json处理"></a>json处理</h2><p><a class="link"   href="https://www.sojson.com/" >json格式化和转义<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="diff文本"><a href="#diff文本" class="headerlink" title="diff文本"></a>diff文本</h2><p><a class="link"   href="https://tool.chinaz.com/tools/diff" >diff文本<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="解密-解码"><a href="#解密-解码" class="headerlink" title="解密&amp;解码"></a>解密&amp;解码</h2><p><a class="link"   href="https://www.bejson.com/jwt/" >jwt解密&#x2F;加密<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令合集</title>
    <url>/2025/01/21/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><h4 id="升级-pip-版本"><a href="#升级-pip-版本" class="headerlink" title="升级 pip 版本"></a>升级 pip 版本</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></div>

<h4 id="显示已安装packages"><a href="#显示已安装packages" class="headerlink" title="显示已安装packages"></a>显示已安装packages</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></div>

<h3 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h3><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">python -m venv myenv</span><br></pre></td></tr></table></figure></div>

<h4 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">source myenv/bin/activate</span><br></pre></td></tr></table></figure></div>

<h4 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
  <entry>
    <title>测试用参数</title>
    <url>/2025/02/14/%E6%B5%8B%E8%AF%95%E7%94%A8%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="Appid"><a href="#Appid" class="headerlink" title="Appid"></a>Appid</h3><ul>
<li>仙路何方： wx05dd926e19017db6</li>
<li>测试 Rank ： wxa61244f467112940</li>
</ul>
<h3 id="微信广告ID"><a href="#微信广告ID" class="headerlink" title="微信广告ID"></a>微信广告ID</h3><p>{ “rewarded_ad_id”, “adunit-16f279208d14fb8a” }<br>{ “interstitial_ad_id”, “adunit-f748eed6c5dbb429” }</p>
<h2 id="抖音小程序"><a href="#抖音小程序" class="headerlink" title="抖音小程序"></a>抖音小程序</h2><h3 id="AppId"><a href="#AppId" class="headerlink" title="AppId"></a>AppId</h3><p>仙路何方：tt76a6001be993358207</p>
<h3 id="抖音广告ID"><a href="#抖音广告ID" class="headerlink" title="抖音广告ID"></a>抖音广告ID</h3><p>{ “rewarded_ad_id”, “2l69dgafk5c2bj9kdf” }<br>{ “interstitial_ad_id”, “5hghco49bfohph28a2” }</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>测试参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 执行失败的原因排查</title>
    <url>/2025/02/07/Shell-%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>jenkins 任务中，有一个步骤是执行一个 shell 命令执行 c#中的一个方法导出 package，命令如下</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/Applications/Unity/Hub/Editor/2022.3.22f1/Unity.app/Contents/MacOS/Unity -quit -batchmode -projectPath /Users/jenkins/jenkins_home/workspace/sdk/zeussdk-ci/Unity/ZeusSDK -executeMethod ExportPackage.ExportAssetsPackage</span><br></pre></td></tr></table></figure></div>

<p>执行失败，报错如下：</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Aborting batchmode due to failure:</span><br><span class="line">executeMethod method ExportPackage.ExportAssetsPackage threw exception.</span><br><span class="line"></span><br><span class="line">build job start</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;_continuous_integration_delivery/pipeline.py&quot;, line 409, in &lt;module&gt;</span><br><span class="line">    build()</span><br><span class="line">  File &quot;_continuous_integration_delivery/pipeline.py&quot;, line 142, in build</span><br><span class="line">    buildUnity(ios_basic_path, unity_basic_path, unity_zeusinfoplist_path)</span><br><span class="line">  File &quot;_continuous_integration_delivery/pipeline.py&quot;, line 352, in buildUnity</span><br><span class="line">    + &quot; -executeMethod ExportPackage.ExportAssetsPackage &quot; + unity_basic_path)</span><br><span class="line">  File &quot;/Users/jenkins/jenkins_home/workspace/sdk/zeussdk-ci/venv/lib/python3.6/site-packages/eve/base/command_toolkit.py&quot;, line 51, in run_external_command</span><br><span class="line">    raise RunCommandException(msg)</span><br><span class="line">eve.base.exception.RunCommandException: ErrorCode: 1, Command: /Applications/Unity/Hub/Editor/2022.3.22f1/Unity.app/Contents/MacOS/Unity -quit -batchmode -projectPath /Users/jenkins/jenkins_home/workspace/sdk/zeussdk-ci/Unity/ZeusSDK -executeMethod ExportPackage.ExportAssetsPackage /Users/jenkins/jenkins_home/workspace/sdk/zeussdk-ci/ci_output/Unity/ZeusSDK_v3.0.6-SNAPSHOT, STDOUT: None, STDERR: </span><br></pre></td></tr></table></figure></div>

<p>从报错信息中，完全无法看出是在哪里抛出了什么异常。</p>
<h2 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h2><p>手动执行该命令，添加日志输出<code>-logFile</code></p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/Applications/Unity/Hub/Editor/2022.3.22f1/Unity.app/Contents/MacOS/Unity -quit -batchmode -projectPath /Users/jenkins/jenkins_home/workspace/sdk/zeussdk-ci/Unity/ZeusSDK -executeMethod ExportPackage.ExportAssetsPackage -logFile /Users/jenkins/logs/logfile.txt</span><br></pre></td></tr></table></figure></div>

<p>会在输出目录下生成一个 logfile.txt 文件，里面会输出详细的错误信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mdimages/2025-02-07-18-41-12.png"
                      alt="2025-02-07-18-41-12.png"
                ></p>
<p>可以看到错误原因是缺少某个目录，导致无法找到路径。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>zeus更新日志</title>
    <url>/2025/02/11/zeus%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="2025-02-01"><a href="#2025-02-01" class="headerlink" title="2025.02.01"></a>2025.02.01</h2><p><strong>更新日志：</strong></p>
<p>v2.19.9</p>
<p><strong>🚀 Features</strong></p>
<ul>
<li>Android 调整applovin共享thinking userid 为设置到 getSettings 中</li>
</ul>
<p><strong>🐛 Bug Fixes</strong></p>
<ul>
<li>iOS 修复iOS在xcode16版本下的短信登录区号列表下拉bug</li>
</ul>
<h2 id="2025-02-13"><a href="#2025-02-13" class="headerlink" title="2025.02.13"></a>2025.02.13</h2><p><strong>更新日志：</strong></p>
<p>v3.0.7</p>
<p><strong>🚀 Features</strong></p>
<ul>
<li>Unity 调整GravityAgent 的实现,支持打印module config</li>
<li>Unity 更新LoginResult结构,添加 detail</li>
<li>Unity 添加link.xml配置</li>
<li>Unity gravity enable wx and tt asmdef</li>
<li>Unity 移除ITrack接口中的TrackRegieste,将Register设置用户唯一标识的方法放到了BaseAttribution类中的SetIdentifer方法</li>
<li>Unity BaseAnalytic类中添加了若干方法，用来支持业务需求</li>
<li>Unity 获取 platform 逻辑调整</li>
<li>Unity 移除 attribution manager, 使用 baseAttributionAgent</li>
<li>Unity 调整SDK发起协程网络请求的方式</li>
<li>Unity 微信广告变现添加引力事件上报</li>
<li>Unity 移除setup agent， 初始化微信， 抖音的逻辑在authentication模块中实现</li>
<li>Unity 调整打包脚本以及ModuleConfig相关配置</li>
<li>Unity 添加微信小游戏和抖音小游戏平台广告</li>
</ul>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>zeus 版本更新</tag>
      </tags>
  </entry>
</search>
